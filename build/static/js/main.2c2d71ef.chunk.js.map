{"version":3,"sources":["routes/routesMap/index.ts","routes/router.ts","routes/index.tsx","stores/index.ts","stores/home.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["routes","path","component","React","lazy","exact","routesMap","Router","fallback","Routes","map","v","i","key","homeStore","action","bound","title","this","observable","computed","App","stores","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uRAAe,EAEN,SAFM,EAGN,SCyBMA,EAhBA,CACb,CACEC,KDbI,ICcJC,UATUC,IAAMC,MAAK,kBAAM,iCAU3BC,OAAO,GAET,CACEJ,KAAMK,EACNJ,UAbUC,IAAMC,MAAK,kBAAM,kCAe7B,CACEH,KAAMK,EACNJ,UAhBUC,IAAMC,MAAK,kBAAM,yDCchBG,I,MAAAA,EAjBf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUC,SAAU,yCAClB,kBAAC,IAAD,KAEIC,EAAOC,KAAI,SAACC,EAAGC,GAAJ,OACT,kBAAC,IAAD,CAAOC,IAAKD,EAAGX,KAAMU,EAAEV,KAAMI,MAAOM,EAAEN,QAAS,EAAOH,UAAWS,EAAET,mB,uDCVlE,GACXY,UAAW,I,ECQVC,IAAOC,M,oIACQC,GACZC,KAAKD,MAAQA,I,iCALb,MAAM,SAAN,OAAgBC,KAAKD,W,wCAJxBE,K,wEAAmC,W,sCAEnCC,K,uLCQUC,EARO,WACpB,OACE,kBAAC,IAAaC,EACZ,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2c2d71ef.chunk.js","sourcesContent":["export default {\n  home: '/',\n  about: '/about',\n  users: '/users'\n}","import React from 'react'\nimport routesMap from './routesMap';\n// import asyncComponent from '../components/AsyncComponent';\n\n// const Progran2 = asyncComponent(() => import(\"./Program2\"));\n\nconst Index = React.lazy(() => import('../pages/home'))\nconst About = React.lazy(() => import('../pages/about'))\nconst Users = React.lazy(() => import('../pages/users'))\n\n// import Index from '../pages/home'\n\nconst routes = [\n  {\n    path: routesMap.home,\n    component: Index,\n    exact: true,\n  },\n  {\n    path: routesMap.about,\n    component: About,\n  },\n  {\n    path: routesMap.users,\n    component: Users,\n  },\n]\n\nexport default routes","import React, { Suspense } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Routes from './router';\n// import routesMap from './routesMap';\n\nfunction Router() {\n  return (\n    <BrowserRouter>\n      <Suspense fallback={<div>loading</div>}>\n        <Switch>\n          {\n            Routes.map((v, i) => (\n              <Route key={i} path={v.path} exact={v.exact || false} component={v.component} />\n            ))\n          }\n        </Switch>\n      </Suspense>\n      \n    </BrowserRouter>\n  );\n}\n\nexport default Router;","import HomeStore from './home';\n \nexport default {\n    homeStore: new HomeStore()\n}","import {action, computed, observable} from 'mobx'\nimport {IHomeStore} from '../models/IHomeStore'\n\nclass HomeStore implements IHomeStore {\n    @observable  public title: string = \"ho2me\"\n\n    @computed\n    public get writeTitle(): string {\n        return `hello ${this.title}`\n    }\n\n    @action.bound\n    public setTitle(title: string): void{\n        this.title = title\n    }\n}\n\nexport default HomeStore;","import React from 'react';\nimport './App.css';\nimport Routes from './routes';\nimport { Provider } from 'mobx-react';\nimport stores from './stores/index';\n\nconst App: React.FC = () => {\n  return (\n    <Provider {...stores}>\n      <Routes />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}